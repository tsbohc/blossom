#!/usr/bin/env lua
package.preload["inspect"] = package.preload["inspect"] or function(...)
  local inspect ={
    _VERSION = 'inspect.lua 3.1.0',
    _URL     = 'http://github.com/kikito/inspect.lua',
    _DESCRIPTION = 'human-readable representations of tables',
    _LICENSE = [[
      MIT LICENSE
      Copyright (c) 2013 Enrique GarcÃ­a Cota
      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the
      "Software"), to deal in the Software without restriction, including
      without limitation the rights to use, copy, modify, merge, publish,
      distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so, subject to
      the following conditions:
      The above copyright notice and this permission notice shall be included
      in all copies or substantial portions of the Software.
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
      IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
      CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
      TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    ]]
  }
  
  local tostring = tostring
  
  inspect.KEY       = setmetatable({}, {__tostring = function() return 'inspect.KEY' end})
  inspect.METATABLE = setmetatable({}, {__tostring = function() return 'inspect.METATABLE' end})
  
  local function rawpairs(t)
    return next, t, nil
  end
  
  -- Apostrophizes the string if it has quotes, but not aphostrophes
  -- Otherwise, it returns a regular quoted string
  local function smartQuote(str)
    if str:match('"') and not str:match("'") then
      return "'" .. str .. "'"
    end
    return '"' .. str:gsub('"', '\\"') .. '"'
  end
  
  -- \a => '\\a', \0 => '\\0', 31 => '\31'
  local shortControlCharEscapes = {
    ["\a"] = "\\a",  ["\b"] = "\\b", ["\f"] = "\\f", ["\n"] = "\\n",
    ["\r"] = "\\r",  ["\t"] = "\\t", ["\v"] = "\\v"
  }
  local longControlCharEscapes = {} -- \a => nil, \0 => \000, 31 => \031
  for i=0, 31 do
    local ch = string.char(i)
    if not shortControlCharEscapes[ch] then
      shortControlCharEscapes[ch] = "\\"..i
      longControlCharEscapes[ch]  = string.format("\\%03d", i)
    end
  end
  
  local function escape(str)
    return (str:gsub("\\", "\\\\")
               :gsub("(%c)%f[0-9]", longControlCharEscapes)
               :gsub("%c", shortControlCharEscapes))
  end
  
  local function isIdentifier(str)
    return type(str) == 'string' and str:match( "^[_%a][_%a%d]*$" )
  end
  
  local function isSequenceKey(k, sequenceLength)
    return type(k) == 'number'
       and 1 <= k
       and k <= sequenceLength
       and math.floor(k) == k
  end
  
  local defaultTypeOrders = {
    ['number']   = 1, ['boolean']  = 2, ['string'] = 3, ['table'] = 4,
    ['function'] = 5, ['userdata'] = 6, ['thread'] = 7
  }
  
  local function sortKeys(a, b)
    local ta, tb = type(a), type(b)
  
    -- strings and numbers are sorted numerically/alphabetically
    if ta == tb and (ta == 'string' or ta == 'number') then return a < b end
  
    local dta, dtb = defaultTypeOrders[ta], defaultTypeOrders[tb]
    -- Two default types are compared according to the defaultTypeOrders table
    if dta and dtb then return defaultTypeOrders[ta] < defaultTypeOrders[tb]
    elseif dta     then return true  -- default types before custom ones
    elseif dtb     then return false -- custom types after default ones
    end
  
    -- custom types are sorted out alphabetically
    return ta < tb
  end
  
  -- For implementation reasons, the behavior of rawlen & # is "undefined" when
  -- tables aren't pure sequences. So we implement our own # operator.
  local function getSequenceLength(t)
    local len = 1
    local v = rawget(t,len)
    while v ~= nil do
      len = len + 1
      v = rawget(t,len)
    end
    return len - 1
  end
  
  local function getNonSequentialKeys(t)
    local keys, keysLength = {}, 0
    local sequenceLength = getSequenceLength(t)
    for k,_ in rawpairs(t) do
      if not isSequenceKey(k, sequenceLength) then
        keysLength = keysLength + 1
        keys[keysLength] = k
      end
    end
    table.sort(keys, sortKeys)
    return keys, keysLength, sequenceLength
  end
  
  local function countTableAppearances(t, tableAppearances)
    tableAppearances = tableAppearances or {}
  
    if type(t) == 'table' then
      if not tableAppearances[t] then
        tableAppearances[t] = 1
        for k,v in rawpairs(t) do
          countTableAppearances(k, tableAppearances)
          countTableAppearances(v, tableAppearances)
        end
        countTableAppearances(getmetatable(t), tableAppearances)
      else
        tableAppearances[t] = tableAppearances[t] + 1
      end
    end
  
    return tableAppearances
  end
  
  local copySequence = function(s)
    local copy, len = {}, #s
    for i=1, len do copy[i] = s[i] end
    return copy, len
  end
  
  local function makePath(path, ...)
    local keys = {...}
    local newPath, len = copySequence(path)
    for i=1, #keys do
      newPath[len + i] = keys[i]
    end
    return newPath
  end
  
  local function processRecursive(process, item, path, visited)
    if item == nil then return nil end
    if visited[item] then return visited[item] end
  
    local processed = process(item, path)
    if type(processed) == 'table' then
      local processedCopy = {}
      visited[item] = processedCopy
      local processedKey
  
      for k,v in rawpairs(processed) do
        processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY), visited)
        if processedKey ~= nil then
          processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey), visited)
        end
      end
  
      local mt  = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE), visited)
      if type(mt) ~= 'table' then mt = nil end -- ignore not nil/table __metatable field
      setmetatable(processedCopy, mt)
      processed = processedCopy
    end
    return processed
  end
  
  
  
  -------------------------------------------------------------------
  
  local Inspector = {}
  local Inspector_mt = {__index = Inspector}
  
  function Inspector:puts(...)
    local args   = {...}
    local buffer = self.buffer
    local len    = #buffer
    for i=1, #args do
      len = len + 1
      buffer[len] = args[i]
    end
  end
  
  function Inspector:down(f)
    self.level = self.level + 1
    f()
    self.level = self.level - 1
  end
  
  function Inspector:tabify()
    self:puts(self.newline, string.rep(self.indent, self.level))
  end
  
  function Inspector:alreadyVisited(v)
    return self.ids[v] ~= nil
  end
  
  function Inspector:getId(v)
    local id = self.ids[v]
    if not id then
      local tv = type(v)
      id              = (self.maxIds[tv] or 0) + 1
      self.maxIds[tv] = id
      self.ids[v]     = id
    end
    return tostring(id)
  end
  
  function Inspector:putKey(k)
    if isIdentifier(k) then return self:puts(k) end
    self:puts("[")
    self:putValue(k)
    self:puts("]")
  end
  
  function Inspector:putTable(t)
    if t == inspect.KEY or t == inspect.METATABLE then
      self:puts(tostring(t))
    elseif self:alreadyVisited(t) then
      self:puts('<table ', self:getId(t), '>')
    elseif self.level >= self.depth then
      self:puts('{...}')
    else
      if self.tableAppearances[t] > 1 then self:puts('<', self:getId(t), '>') end
  
      local nonSequentialKeys, nonSequentialKeysLength, sequenceLength = getNonSequentialKeys(t)
      local mt                = getmetatable(t)
  
      self:puts('{')
      self:down(function()
        local count = 0
        for i=1, sequenceLength do
          if count > 0 then self:puts(',') end
          self:puts(' ')
          self:putValue(t[i])
          count = count + 1
        end
  
        for i=1, nonSequentialKeysLength do
          local k = nonSequentialKeys[i]
          if count > 0 then self:puts(',') end
          self:tabify()
          self:putKey(k)
          self:puts(' = ')
          self:putValue(t[k])
          count = count + 1
        end
  
        if type(mt) == 'table' then
          if count > 0 then self:puts(',') end
          self:tabify()
          self:puts('<metatable> = ')
          self:putValue(mt)
        end
      end)
  
      if nonSequentialKeysLength > 0 or type(mt) == 'table' then -- result is multi-lined. Justify closing }
        self:tabify()
      elseif sequenceLength > 0 then -- array tables have one extra space before closing }
        self:puts(' ')
      end
  
      self:puts('}')
    end
  end
  
  function Inspector:putValue(v)
    local tv = type(v)
  
    if tv == 'string' then
      self:puts(smartQuote(escape(v)))
    elseif tv == 'number' or tv == 'boolean' or tv == 'nil' or
           tv == 'cdata' or tv == 'ctype' then
      self:puts(tostring(v))
    elseif tv == 'table' then
      self:putTable(v)
    else
      self:puts('<', tv, ' ', self:getId(v), '>')
    end
  end
  
  -------------------------------------------------------------------
  
  function inspect.inspect(root, options)
    options       = options or {}
  
    local depth   = options.depth   or math.huge
    local newline = options.newline or '\n'
    local indent  = options.indent  or '  '
    local process = options.process
  
    if process then
      root = processRecursive(process, root, {}, {})
    end
  
    local inspector = setmetatable({
      depth            = depth,
      level            = 0,
      buffer           = {},
      ids              = {},
      maxIds           = {},
      newline          = newline,
      indent           = indent,
      tableAppearances = countTableAppearances(root)
    }, Inspector_mt)
  
    inspector:putValue(root)
  
    return table.concat(inspector.buffer)
  end
  
  setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })
  
  return inspect
end
inspect = require("inspect")
__cache = {}
local function lit(s)
  local function _0_(c)
    return ("%" .. c)
  end
  return s:gsub("[%(%)%.%%%+%-%*%?%[%]%^%$]", _0_)
end
local function split(s, d)
  local s0 = (s .. d)
  local xs = {}
  for m in s0:gmatch(("(.-)" .. lit(d))) do
    table.insert(xs, m)
  end
  return xs
end
local function nil_3f(v)
  return (v == nil)
end
local function string_3f(v)
  return (type(v) == "string")
end
local function seq_3f(xs)
  local i = 0
  for _ in pairs(xs) do
    i = (i + 1)
    if nil_3f(xs[i]) then
      return false
    end
  end
  return true
end
local function contains_3f(xt, y)
  if seq_3f(xt) then
    for _, v in ipairs(xt) do
      if (v == y) then
        return true
      end
    end
  else
    if (nil ~= xt[y]) then
      return true
    end
  end
  return false
end
local function pretty_print(...)
  return print(inspect(...))
end
local function expose(xt)
  if nil_3f(_G.__exposed) then
    __exposed = {}
  end
  for k, v in pairs(xt) do
    __exposed[k] = v
  end
  return nil
end
grammar = {e = {l = "{@!-", r = "-!@}"}, p = {l = "{@:-", r = "-:@}"}, v = {l = "[", r = "]"}}
local function varset_list()
  local file = assert(io.popen("find varsets -type f", "r"))
  local function close_handlers_0_(ok_0_, ...)
    file:close()
    if ok_0_ then
      return ...
    else
      return error(..., 0)
    end
  end
  local function _0_()
    local xs = {}
    for line in file:lines() do
      local function _2_()
        local _1_0 = line:gsub("varsets/", "")
        return _1_0
      end
      table.insert(xs, _2_())
    end
    return xs
  end
  return close_handlers_0_(xpcall(_0_, (package.loaded.fennel or debug).traceback))
end
local function varset(name)
  local file = io.open(("varsets/" .. name), "r")
  local function close_handlers_0_(ok_0_, ...)
    file:close()
    if ok_0_ then
      return ...
    else
      return error(..., 0)
    end
  end
  local function _0_()
    local comment_re = "%s*!"
    local keyval_re = "(%w+):%s*(%w+)"
    local xt = {}
    for line in file:lines() do
      if not (line:match(comment_re) or (line == "")) then
        local key, val = line:match(keyval_re)
        xt[key] = val
      end
    end
    return xt
  end
  return close_handlers_0_(xpcall(_0_, (package.loaded.fennel or debug).traceback))
end
local function get_node(xt, dots)
  local v = xt
  if string_3f(dots) then
    for w in dots:gmatch("[%w_]+") do
      if nil_3f(v) then
      else
        v = v[w]
      end
    end
    return tostring(v)
  end
end
local function value(dots)
  local root = (dots:match("(%a+)%.") or dots)
  local path = dots:gsub((root .. lit(".")), "")
  local _0_
  if contains_3f(__exposed, root) then
    _0_ = get_node(__exposed, dots)
  else
    local _1_
    do
      if nil_3f(_G.__cache["(varset-list)"]) then
        _G.__cache["(varset-list)"] = varset_list()
      end
      _1_ = _G.__cache["(varset-list)"]
    end
    if contains_3f(_1_, root) then
      local varset0 = nil
      do
        if nil_3f(_G.__cache["(varset root)"]) then
          _G.__cache["(varset root)"] = varset(root)
        end
        varset0 = _G.__cache["(varset root)"]
      end
      _0_ = get_node(varset0, path)
    else
    _0_ = nil
    end
  end
  return (_0_ or "")
end
local function tokens(pattern)
  local dec_l = grammar.v.l
  local dec_r = grammar.v.r
  local token_re = (lit(dec_l) .. "(.-)" .. lit(dec_r))
  local compiled = pattern
  for token in pattern:gmatch(token_re) do
    compiled = compiled:gsub((lit(dec_l) .. token .. lit(dec_r)), value(token))
  end
  return compiled
end
local function patterns(template)
  local dec_l = grammar.p.l
  local dec_r = grammar.p.r
  local pattern_re = (lit(dec_l) .. "(.-)" .. lit(dec_r))
  local xt = {}
  for pattern in template:gmatch(pattern_re) do
    xt[(dec_l .. pattern .. dec_r)] = value(tokens(pattern))
  end
  return xt
end
local function slurp(path)
  local file = io.open(path, "r")
  local function close_handlers_0_(ok_0_, ...)
    file:close()
    if ok_0_ then
      return ...
    else
      return error(..., 0)
    end
  end
  local function _0_()
    local s = file:read("*a")
    return s
  end
  return close_handlers_0_(xpcall(_0_, (package.loaded.fennel or debug).traceback))
end
expose({colo = "kohi", font = "fira", fonts = {fira = {normal = 10}}})
local function compile(template, dict)
  local compiled = template
  for key, val in pairs(dict) do
    compiled = compiled:gsub(lit(key), val)
  end
  return compiled
end
local function dec(s, d, lit_3f)
  local grammar0 = {exp = {l = "{@!-", r = "-!@}"}, pat = {l = "{%- ", r = " -%}"}, var = {l = "{", r = "}"}}
  local l = nil
  if lit_3f then
    l = lit((grammar0)[d].l)
  else
    l = (grammar0)[d].l
  end
  local r = nil
  if lit_3f then
    r = lit((grammar0)[d].r)
  else
    r = (grammar0)[d].r
  end
  return (l .. s .. r)
end
local function testing()
  local test = {beverage = "coffee", dessert = {garnish = "cherry jam", name = "waffles"}, emoji = {happy = "uwu", sad = "-w-"}, ff0000 = "waffle", mood = "happy"}
  local function has_expr_3f(s)
    local expr_re = dec("([%w.]+)", "var", true)
    if s:find(expr_re) then
      return true
    else
      return false
    end
  end
  local function compile0(pat)
    local expr_re = dec("([%w.]+)", "var", true)
    local key = pat:match(expr_re)
    local val = get_node(test, key)
    return pat:gsub(dec(key, "var", true), val)
  end
  local function rec_compile(pat)
    if has_expr_3f(pat) then
      return rec_compile(compile0(pat))
    else
      return pat
    end
  end
  local tt = "{%- {beverage} and {dessert.name} with {dessert.garnish}! {emoji.{mood}} -%}"
  local function patterns0(s)
    local pat_re = dec("(.-)", "pat", true)
    local xt = {}
    for pat in s:gmatch(pat_re) do
      xt[dec(pat, "pat")] = rec_compile(pat)
    end
    return xt
  end
  return pretty_print(patterns0(tt))
end
return testing()
